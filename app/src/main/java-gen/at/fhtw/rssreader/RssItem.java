package at.fhtw.rssreader;

import at.fhtw.rssreader.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table RSS_ITEM.
 */
public class RssItem {

    private Long id;
    private String title;
    private String description;
    private String link;
    private java.util.Date pubDate;
    private String content;
    private Boolean read;
    private Boolean favorite;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RssItemDao myDao;

    private RssFeed rssFeed;
    private Long rssFeed__resolvedKey;


    public RssItem() {
    }

    public RssItem(Long id) {
        this.id = id;
    }

    public RssItem(Long id, String title, String description, String link, java.util.Date pubDate, String content, Boolean read, Boolean favorite) {
        this.id = id;
        this.title = title;
        this.description = description;
        this.link = link;
        this.pubDate = pubDate;
        this.content = content;
        this.read = read;
        this.favorite = favorite;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRssItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getLink() {
        return link;
    }

    public void setLink(String link) {
        this.link = link;
    }

    public java.util.Date getPubDate() {
        return pubDate;
    }

    public void setPubDate(java.util.Date pubDate) {
        this.pubDate = pubDate;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public Boolean getRead() {
        return read;
    }

    public void setRead(Boolean read) {
        this.read = read;
    }

    public Boolean getFavorite() {
        return favorite;
    }

    public void setFavorite(Boolean favorite) {
        this.favorite = favorite;
    }

    /** To-one relationship, resolved on first access. */
    public RssFeed getRssFeed() {
        Long __key = this.id;
        if (rssFeed__resolvedKey == null || !rssFeed__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RssFeedDao targetDao = daoSession.getRssFeedDao();
            RssFeed rssFeedNew = targetDao.load(__key);
            synchronized (this) {
                rssFeed = rssFeedNew;
            	rssFeed__resolvedKey = __key;
            }
        }
        return rssFeed;
    }

    public void setRssFeed(RssFeed rssFeed) {
        synchronized (this) {
            this.rssFeed = rssFeed;
            id = rssFeed == null ? null : rssFeed.getId();
            rssFeed__resolvedKey = id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
